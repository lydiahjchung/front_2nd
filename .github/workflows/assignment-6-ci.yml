on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - assignment/6
    paths:
      - "packages/assignment-6/**"

jobs:
  # job1: tsc, build 실행, 오류 발생하면 코멘트 남김
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
        working-directory: packages/assignment-6

      - name: TypeScript Check
        run: pnpm run tsc
        working-directory: packages/assignment-6
        continue-on-error: true

      - name: Comment on TypeScript Check failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'The TypeScript check has failed. Please check the logs for more details.'
            })

      - name: Build
        run: pnpm run build
        continue-on-error: true

      - name: Comment on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'The build has failed. Please check the logs for more details.'
            })

  # job2: eslint 실행, eslint에서 오류 발생 시 report를 코멘트에 남김
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
        working-directory: packages/assignment-6

      - name: Run ESLint
        run: |
          pnpm install
          pnpm -F assignment-6 lint > eslint_report.txt
        continue-on-error: true

      - name: Check ESLint results
        id: check_eslint
        run: |
          if grep -q 'error' eslint_report.txt; then
            echo "eslint_errors=true" >> $GITHUB_ENV
          else
            echo "eslint_errors=false" >> $GITHUB_ENV
          fi

      - name: Comment on ESLint results
        if: env.eslint_errors == 'true' # This will trigger only if there were ESLint errors
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const eslintReport = fs.readFileSync('eslint_report.txt', 'utf8');
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `
              ## ESLint Results
              ${eslintReport}
              `
            });

  # job3: 테스트 실행, 커버리지 측정, 코멘트 남김
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
        working-directory: packages/assignment-6

      - name: Run tests and generate coverage
        run: |
          pnpm install
          pnpm -F assignment-6 test -- --coverage > test_report.txt

      - name: Comment on test results
        if: success() # This will trigger only if the previous step succeeded
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const testReport = fs.readFileSync('test_report.txt', 'utf8');
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `
              ## 테스트 성공 ✅
              ${testReport}
              `
            });

  # job4: lighthouse ci 실행, 실행 결과를 코멘트로 남김

#     lighthouse:
#       runs-on: ubuntu-latest
#       steps:
#         - name: job4 구현
#           run: echo "job4의 내용을 구현해주세요"

# job5: PR이 open 될 때만 실행됨, 팀원 중 한 명을 랜덤으로 선정하여 리뷰어 지정, 코멘트에 멘션해서 올림
#     assign_reviewer:
#       runs-on: ubuntu-latest
#       steps:
#         - name: job5 구현
#           run: echo "job5의 내용을 구현해주세요"
